program(funcs, datas) ::= <<

<datas; separator="\n\n">
<funcs; separator="\n\n">

_main();

>>

func(type, name, params, decl, stmt) ::= <<
<type> _<name>(<params; separator=", ">)
{
    <if(decl)><decl; separator=";\n">;<endif>
    <stmt; separator="\n">
}
>>

param(type, name) ::= "<type> <name>"




return(expr) ::= "return (<expr>);"

while(expr, stmt) ::= <<
while(<expr>)
{
    <stmt>
}
>>

if(expr, stmt, elstmt) ::= <<
if(<expr>)
{
    <stmt; separator="\n">
} <if(elstmt)>else {
    <elstmt; separator="\n">
}
<endif>
>>

array(name, array) ::= "<name><array>"

new_array(type, expr) ::= "new <type>[<expr>];"

call(name, args) ::= <<<name>(<args; separator=", ">)>>
call_value(name, args, offset, type) ::= <<"(<type>)(<name>(<args; separator=", ">)[offset])">>

// Return
return(expr) ::= "return <<expr>>;"


// IO

print(expr) ::= "Console.Write(<expr>);"
read_decl(var) ::= "var <<var>> = Console.ReadLine()"
read(var) ::= "<<var>> = Console.ReadLine()"

// Scope
scope(stmt) ::= <<
{
    <stmt; separator="\n">
}
>>

// Declaration / Attribute
attr(var, expr, type) ::= "<var> = (<type>)<expr>;"
decl_attr(var, expr, type) ::= "var <var> = (<type>)<expr>;"

// Access
array_access(type, expr) ::= "<type>[<expr>]"
data_access(type, id) ::= "<type>.<id>"

// Exps
exps(exp) ::= <<(<exp; separator=", ">)>>

tuple(exp) ::= "(<exp>)"
mul_expr(left_expr, right_expr) ::= "(<left_expr> * <right_expr>)"
div_expr(left_expr, right_expr) ::= "(<left_expr> / <right_expr>)"
mod_expr(left_expr, right_expr) ::= "(<left_expr> % <right_expr>)"
add_expr(left_expr, right_expr) ::= "(<left_expr> + <right_expr>)"
sub_expr(left_expr, right_expr) ::= "(<left_expr> - <right_expr>)"

lt_expr(left_expr, right_expr) ::= "(<left_expr> \< <right_expr>)"
equals_expr(left_expr, right_expr) ::= "(<left_expr> == <right_expr>)"
and_expr(left_expr, right_expr) ::= "(<left_expr> && <right_expr>)"

not_expr(expr) ::= "!<expr>"
minus_expr(expr) ::= "- <expr>"


// Types
array_type(type) ::= "<type>[]"
int_type() ::= "int"
float_type() ::= "float"
boolean_type() ::= "bool"
char_type() ::= "char"


// Value
true_value() ::= "true"
false_value() ::= "false"
null_value() ::= "null"
float_expr(value) ::= "<value>"
int_expr(value) ::= "<value>"
char_expr(value) ::= "\'<value>\'"








